{"version":3,"sources":["modules/authentication/resolvers.js","modules/authentication/register/styles.js","modules/authentication/register/register.view.js","modules/authentication/register/register.container.js"],"names":["LOGIN","gql","REGISTER","useStyles","makeStyles","theme","body","backgroundColor","palette","background","layout","borderRadius","spacing","width","marginLeft","marginRight","breakpoints","up","paper","marginTop","marginBottom","padding","title","color","text","secondary","form","margin","button","link","textDecoration","mapActionsToProps","onSetAuthentication","RegisterGraphQL","graphql","name","options","errorPolicy","notifyOnNetworkStatusChange","update","proxy","register","data","localStorage","setItem","token","onRegister","onRegisterResult","history","useState","email","profession","password","state","setState","handleChange","event","target","value","handleSubmit","a","preventDefault","variables","classes","loading","className","Paper","CssBaseline","Box","textAlign","fontWeight","fontSize","m","onSubmit","onError","errors","console","log","label","onChange","validators","errorMessages","isRequiredMessage","required","autoFocus","fullWidth","isEmail","Grid","container","item","xs","Button","type","variant","onClick","goBack","size","connect"],"mappings":"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","file":"static/js/12.1b3d6982.chunk.js","sourcesContent":["import { gql } from 'apollo-boost'\n\nexport const LOGIN = gql`\n  mutation login(\n    $email: String! \n    $password: String! \n  ){\n    login (email: $email, password: $password ) {\n      token\n      user {\n        name\n      }\n    }\n  }\n`\n\nexport const REGISTER = gql`\n  mutation register(\n    $name: String! \n    $email: String! \n    $profession: String! \n    $password: String! \n  ){\n    register (name: $name, email: $email, profession: $profession password: $password){\n      token\n      user {\n        id\n        name\n        email\n        profession\n      }\n    }\n  }\n`","import { makeStyles } from '@material-ui/core'\n\nexport const useStyles = makeStyles(theme => ({\n  '@global': {\n    body: {\n      backgroundColor: theme.palette.background,\n    },\n  },\n  layout: {\n    borderRadius: theme.spacing(1),\n    width: 'auto',\n    marginLeft: theme.spacing(2),\n    marginRight: theme.spacing(2),\n    [theme.breakpoints.up(600 + theme.spacing(2) * 2)]: {\n      width: 360,\n      marginLeft: 'auto',\n      marginRight: 'auto',\n    },\n  },\n  paper: {\n    borderRadius: theme.spacing(1),\n    backgroundColor: theme.palette.background.paper,\n    marginTop: theme.spacing(4),\n    marginBottom: theme.spacing(3),\n    padding: theme.spacing(2),\n    [theme.breakpoints.up(600 + theme.spacing(3) * 2)]: {\n      marginTop: theme.spacing(6),\n      marginBottom: theme.spacing(6),\n      padding: theme.spacing(3),\n    },\n  },\n  title: {\n    color: theme.palette.text.secondary,\n  },\n  form: {\n    margin: theme.spacing(2, 4),\n  },\n  button: {\n    marginTop: theme.spacing(5),\n  },\n  link: {\n    textDecoration: 'none',\n  },\n}))\n","import React, { useState } from 'react'\nimport { CssBaseline, Grid, Paper, Box, Button } from '@material-ui/core'\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator'\n\nimport { Loading, Password } from '../../../components'\nimport { isRequiredMessage, isEmail} from '../../../constants'\nimport { useStyles } from './styles'\n\nexport const RegisterView =  ({ onRegister, onRegisterResult, onSetAuthentication, history }) => {\n  const [state, setState] = useState({\n    name: '',\n    email: '',\n    profession: '', \n    password: '' \n  })\n\n  const handleChange = name => event => setState({ ...state, [name]: event.target.value})\n\n  const handleNavigateGoBack = () => history.goBack()\n\n  const handleSubmit = async event => {\n    event.preventDefault()\n    \n    const data = await onRegister({ variables: { ...state }})\n\n    if (data) onSetAuthentication()\n  }\n\n  const classes = useStyles()\n  \n  if (onRegisterResult.loading)\n    return <Loading />\n  else\n    return (\n      <main className={classes.layout}>\n        <Paper className={classes.paper}>\n          <CssBaseline />\n          <Box textAlign=\"center\" className={classes.title} fontWeight={600} fontSize={32} m={2}>\n            Registrar-se\n          </Box>\n          <ValidatorForm\n            className={classes.form}\n            onSubmit={handleSubmit}\n            onError={errors => console.log(errors)}\n          >\n            <TextValidator\n              name=\"name\"\n              label=\"Nome\"\n              value={state.name}\n              onChange={handleChange('name')}\n              validators={['required']}\n              errorMessages={[isRequiredMessage]}\n              color=\"secondary\"\n              margin=\"normal\"\n              required\n              autoFocus\n              fullWidth\n            />\n            <TextValidator\n              name=\"email\"\n              label=\"Email\"\n              value={state.email}\n              onChange={handleChange('email')}\n              validators={['required', 'isEmail']}\n              errorMessages={[isRequiredMessage, isEmail]}\n              color=\"secondary\"\n              margin=\"normal\"\n              required\n              fullWidth\n            />\n            <TextValidator\n              name=\"profession\"\n              label=\"ProfissÃ£o\"\n              value={state.profession}\n              onChange={handleChange('profession')}\n              validators={['required']}\n              errorMessages={[isRequiredMessage]}\n              color=\"secondary\"\n              margin=\"normal\"\n              required\n              fullWidth\n            />\n            <Password\n              value={state.password}\n              onChange={handleChange('password')}\n            />\n            <Grid container spacing={2} className={classes.button} >\n              <Grid item xs={12}>\n                <Button\n                  type=\"submit\"\n                  color=\"primary\"\n                  fullWidth\n                  variant=\"contained\"\n                >\n                  Registrar-se\n                </Button>\n              </Grid>\n              <Grid item xs={12}>\n                <Button\n                  onClick={handleNavigateGoBack}\n                  color=\"primary\"\n                  fullWidth\n                  size='small'\n                >\n                  Voltar\n                </Button>\n              </Grid>\n            </Grid>\n          </ValidatorForm>\n        </Paper>\n      </main>\n  )\n}\n","import { RegisterView } from './register.view'\n// REDUX\nimport { connect } from 'react-redux'\nimport { onSetAuthentication } from '../authentication.state'\n// APOLLO GRAPHQL\nimport { graphql } from 'react-apollo'\nimport { REGISTER } from '../resolvers'\n\nconst mapStateToProps = () => ({})\nconst mapActionsToProps = { onSetAuthentication }\n\nconst RegisterGraphQL = graphql(REGISTER, {\n  name: 'onRegister',\n  options: { \n    errorPolicy: 'all', \n    notifyOnNetworkStatusChange: true,\n    update: (proxy, { data : { register } }) =>\n      localStorage.setItem('token', register.token), \n  }, \n})(RegisterView)\n\nexport default connect(\n  mapStateToProps,\n  mapActionsToProps\n)(RegisterGraphQL)\n"],"sourceRoot":""}