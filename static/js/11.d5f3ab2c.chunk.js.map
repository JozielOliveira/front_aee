{"version":3,"sources":["modules/authentication/resolvers.js","modules/authentication/login/styles.js","modules/authentication/login/login.view.js","modules/authentication/login/login.container.js"],"names":["LOGIN","gql","REGISTER","useStyles","makeStyles","theme","body","backgroundColor","palette","background","layout","borderRadius","spacing","width","marginLeft","marginRight","breakpoints","up","paper","marginTop","marginBottom","padding","paddingBottom","title","color","text","secondary","form","margin","button","link","textDecoration","mapActionsToProps","onSetAuthentication","LoginGraphQL","graphql","name","options","errorPolicy","notifyOnNetworkStatusChange","update","proxy","login","data","localStorage","setItem","token","onLogin","onLoginResult","history","useState","email","password","state","setState","handleChange","event","target","value","handleSubmit","a","preventDefault","variables","classes","loading","className","Paper","CssBaseline","Box","textAlign","fontWeight","fontSize","m","onSubmit","onError","errors","console","log","label","onChange","validators","errorMessages","isRequiredMessage","isEmail","required","autoFocus","fullWidth","Grid","container","item","xs","Button","type","variant","onClick","push","size","connect"],"mappings":"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","file":"static/js/11.d5f3ab2c.chunk.js","sourcesContent":["import { gql } from 'apollo-boost'\n\nexport const LOGIN = gql`\n  mutation login(\n    $email: String! \n    $password: String! \n  ){\n    login (email: $email, password: $password ) {\n      token\n      user {\n        name\n      }\n    }\n  }\n`\n\nexport const REGISTER = gql`\n  mutation register(\n    $name: String! \n    $email: String! \n    $profession: String! \n    $password: String! \n  ){\n    register (name: $name, email: $email, profession: $profession password: $password){\n      token\n      user {\n        id\n        name\n        email\n        profession\n      }\n    }\n  }\n`","import { makeStyles } from '@material-ui/core'\n\nexport const useStyles = makeStyles(theme => ({\n  '@global': {\n    body: {\n      backgroundColor: theme.palette.background,\n    },\n  },\n  layout: {\n    borderRadius: theme.spacing(1),\n    width: 'auto',\n    marginLeft: theme.spacing(2),\n    marginRight: theme.spacing(2),\n    [theme.breakpoints.up(600 + theme.spacing(2) * 2)]: {\n      width: 360,\n      marginLeft: 'auto',\n      marginRight: 'auto',\n    },\n  },\n  paper: {\n    borderRadius: theme.spacing(1),\n    backgroundColor: theme.palette.background.paper,\n    marginTop: theme.spacing(4),\n    marginBottom: theme.spacing(3),\n    padding: theme.spacing(2),\n    [theme.breakpoints.up(600 + theme.spacing(3) * 2)]: {\n      marginTop: theme.spacing(6),\n      marginBottom: theme.spacing(6),\n      padding: theme.spacing(3),\n      paddingBottom: theme.spacing(1)\n    },\n  },\n  title: {\n    color: theme.palette.text.secondary,\n  },\n  form: {\n    margin: theme.spacing(2, 4),\n  },\n  button: {\n    marginTop: theme.spacing(5),\n  },\n  link: {\n    textDecoration: 'none',\n  },\n}))\n","import React, { useState } from 'react'\nimport { CssBaseline, Grid, Paper, Box, Button } from '@material-ui/core'\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator'\n\nimport { Loading, Password } from '../../../components'\nimport { isRequiredMessage, isEmail } from '../../../constants'\nimport { useStyles } from './styles'\n\nexport const LoginView =  ({ onLogin, onLoginResult, onSetAuthentication, history }) => {\n  const [state, setState] = useState({ email: '', password: '' })\n\n  const handleChange = name => event => setState({ ...state, [name]: event.target.value})\n\n  const handleNavigateRegister = () => history.push('/register')\n\n  const handleSubmit = async event => {\n    event.preventDefault()\n    \n    const { email, password } = state\n    const data = await onLogin({ variables: { email, password }})\n\n    if (data) onSetAuthentication()\n  }\n\n  const classes = useStyles()\n  \n  if (onLoginResult.loading)\n    return <Loading />\n  else\n    return (\n      <main className={classes.layout}>\n        <Paper className={classes.paper}>\n          <CssBaseline />\n          <Box textAlign=\"center\" className={classes.title} fontWeight={600} fontSize={32} m={2}>\n            Entrar\n          </Box>\n          <ValidatorForm\n            className={classes.form}\n            onSubmit={handleSubmit}\n            onError={errors => console.log(errors)}\n          >\n            <TextValidator\n              name=\"email\"\n              label=\"Email\"\n              value={state.email}\n              onChange={handleChange('email')}\n              validators={['required', 'isEmail']}\n              errorMessages={[isRequiredMessage, isEmail]}\n              color=\"secondary\"\n              margin=\"normal\"\n              required\n              autoFocus\n              fullWidth\n            />\n            <Password\n              value={state.password}\n              onChange={handleChange('password')}\n            />\n            <Grid container spacing={2} className={classes.button} >\n              <Grid item xs={12}>\n                <Button\n                  type=\"submit\"\n                  color=\"primary\"\n                  fullWidth\n                  variant=\"contained\"\n                >\n                  Entrar\n                </Button>\n              </Grid>\n              <Grid item xs={12}>\n                <Button\n                  onClick={handleNavigateRegister}\n                  color=\"primary\"\n                  fullWidth\n                  size='small'\n                >\n                  NÃ£o sou cadastrado\n                </Button>\n              </Grid>\n            </Grid>\n          </ValidatorForm>\n        </Paper>\n      </main>\n  )\n}\n","import { LoginView } from './login.view'\n\n// REDUX\nimport { connect } from 'react-redux'\nimport { onSetAuthentication } from '../authentication.state'\n\n// APOLLO GRAPHQL\nimport { graphql } from 'react-apollo'\nimport { LOGIN } from '../resolvers'\n\nconst mapStateToProps = () => ({})\nconst mapActionsToProps = { onSetAuthentication }\n\nconst LoginGraphQL = graphql(LOGIN, {\n  name: 'onLogin',\n  options: { \n    errorPolicy: 'all', \n    notifyOnNetworkStatusChange: true,\n    update: (proxy, { data : { login } }) =>\n      localStorage.setItem('token', login.token), \n  }, \n})(LoginView)\n\nexport default connect(\n  mapStateToProps,\n  mapActionsToProps\n)(LoginGraphQL)\n\n"],"sourceRoot":""}