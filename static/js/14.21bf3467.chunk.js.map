{"version":3,"sources":["modules/users/resolvers.js","modules/users/add-user/styles.js","modules/users/add-user/add-user.view.js","modules/users/add-user/add-user.container.js"],"names":["GET_USERS","gql","GET_USER","ADD_USER","EDIT_USER","DELETE_USER","useStyles","makeStyles","theme","body","backgroundColor","palette","background","title","marginBottom","spacing","fontSize","color","text","hint","fontWeight","textAlign","layout","borderRadius","width","marginLeft","marginRight","breakpoints","up","paper","padding","form","margin","button","marginTop","link","textDecoration","LoginGraphQL","graphql","name","options","errorPolicy","notifyOnNetworkStatusChange","update","proxy","createUser","data","query","readQuery","users","push","writeQuery","onAdd","loading","onAddResult","history","useState","email","profession","password","state","setState","navigateGoBack","handleChange","event","target","value","handleSubmit","a","preventDefault","variables","classes","className","Paper","CssBaseline","Box","m","onSubmit","onError","errors","console","log","label","onChange","validators","errorMessages","isRequiredMessage","required","autoFocus","fullWidth","isEmail","Grid","container","justify","item","Button","onClick","variant","type"],"mappings":"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","file":"static/js/14.21bf3467.chunk.js","sourcesContent":["import { gql } from 'apollo-boost'\n\nexport const GET_USERS = gql`\n  {\n    users {\n      id,\n      name,\n      email,\n      profession,\n    }\n  }\n`\n\nexport const GET_USER = gql`\n  query ($id: String!){\n    user(id: $id) {\n      id\n      name\n      email\n      profession\n    }\n  }\n`\n\nexport const ADD_USER = gql`\n  mutation addUser(\n    $name: String! \n    $email: String! \n    $profession: String! \n    $password: String! \n  ){\n    createUser (name: $name, email: $email, profession: $profession password: $password){\n      id\n      name\n      email\n      profession\n    }\n  }\n`\nexport const EDIT_USER = gql`\n  mutation addUser(\n    $id: String!,\n    $name: String\n    $email: String\n    $profession: String\n    $password: String\n  ){\n    updateUser (id: $id,name: $name, email: $email, profession: $profession password: $password) {\n      id\n      name\n      email\n      profession\n    }\n  }\n`\n\nexport const DELETE_USER = gql`\n  mutation deleteUser($id: String!){\n    deleteUser(id: $id) {\n      id\n    }\n  }\n`\n","import { makeStyles } from '@material-ui/core'\n\nexport const useStyles = makeStyles(theme => ({\n  '@global': {\n    body: {\n      backgroundColor: theme.palette.background,\n    },\n  },\n  title: {\n    marginBottom: theme.spacing(4),\n    fontSize: 48,\n    color: theme.palette.text.hint,\n    fontWeight: 'bold',\n    textAlign: 'center'\n  },\n  layout: {\n    borderRadius: theme.spacing(1),\n    width: 'auto',\n    marginLeft: theme.spacing(3),\n    marginRight: theme.spacing(3),\n    marginBottom: theme.spacing(10),\n    [theme.breakpoints.up(600 + theme.spacing(2) * 2)]: {\n      width: 480,\n      marginLeft: 'auto',\n      marginRight: 'auto',\n    },\n  },\n  paper: {\n    borderRadius: theme.spacing(1),\n    backgroundColor: theme.palette.background.paper,\n    marginBottom: theme.spacing(2),\n    padding: theme.spacing(1),\n  },\n  form: {\n    margin: theme.spacing(2, 4),\n  },\n  button: {\n    marginTop: theme.spacing(5),\n  },\n  link: {\n    textDecoration: 'none',\n  },\n}))\n","import React, { useState } from 'react'\nimport { CssBaseline, Paper, Grid, Box, Button } from '@material-ui/core'\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator'\n\nimport { Loading, Password } from \"../../../components\"\nimport { isRequiredMessage, isEmail} from '../../../constants'\nimport { useStyles } from './styles'\n\nexport const AddUserView =  ({ onAdd, onAddResult: { loading }, history }) => {\n  const [state, setState] = useState({\n    name: '',\n    email: '',\n    profession: '', \n    password: '' \n  })\n\n  const navigateGoBack = () => history.push('/')\n\n  const handleChange = name => event => setState({ ...state, [name]: event.target.value})\n\n  const handleSubmit = async event => {\n    event.preventDefault()\n    \n    const data = await onAdd({ variables: { ...state }})\n\n    if (data) navigateGoBack()\n  }\n\n  const classes = useStyles()\n  \n  if (loading)\n    return <Loading />\n  else\n    return (\n      <main className={classes.layout}>\n        <Paper className={classes.paper}>\n          <CssBaseline />\n          <Box textAlign=\"center\" fontWeight={600} fontSize={32} m={2}>\n            Novo usuário\n          </Box>\n          <ValidatorForm\n            className={classes.form}\n            onSubmit={handleSubmit}\n            onError={errors => console.log(errors)}\n          >\n            <TextValidator\n              name=\"name\"\n              label=\"Nome\"\n              value={state.name}\n              onChange={handleChange('name')}\n              validators={['required']}\n              errorMessages={[isRequiredMessage]}\n              color=\"secondary\"\n              margin=\"normal\"\n              required\n              autoFocus\n              fullWidth\n            />\n            <TextValidator\n              name=\"email\"\n              label=\"Email\"\n              value={state.email}\n              onChange={handleChange('email')}\n              validators={['required', 'isEmail']}\n              errorMessages={[isRequiredMessage, isEmail]}\n              color=\"secondary\"\n              margin=\"normal\"\n              required\n              fullWidth\n            />\n            <TextValidator\n              name=\"profession\"\n              label=\"Profissão\"\n              value={state.profession}\n              onChange={handleChange('profession')}\n              validators={['required']}\n              errorMessages={[isRequiredMessage]}\n              color=\"secondary\"\n              margin=\"normal\"\n              required\n              fullWidth\n            />\n            <Password\n              value={state.password}\n              onChange={handleChange('password')}\n            />\n            <Grid container spacing={2} justify=\"flex-end\" >\n              <Grid item>\n                <Button\n                  onClick={navigateGoBack}\n                  color=\"primary\"\n                  fullWidth\n                  variant=\"outlined\"\n                  className={classes.button}\n                >\n                  Cancelar\n                </Button>\n              </Grid>\n              <Grid item>\n                <Button\n                  type=\"submit\"\n                  color=\"primary\"\n                  fullWidth\n                  variant=\"contained\"\n                  className={classes.button}\n                >\n                  Adicionar\n                </Button>\n              </Grid>\n            </Grid>\n          </ValidatorForm>\n        </Paper>\n      </main>\n  )\n}\n","import { AddUserView } from './add-user.view'\n// APOLLO GRAPHQL\nimport { graphql } from 'react-apollo'\nimport { ADD_USER, GET_USERS } from '../resolvers'\n\nconst LoginGraphQL = graphql(ADD_USER, {\n  name: 'onAdd',\n  options: {\n    errorPolicy: 'all', \n    notifyOnNetworkStatusChange: true,\n    update: (proxy, { data: { createUser } }) => {\n      const query = GET_USERS\n      const data = proxy.readQuery({ query })\n      \n      data.users.push(createUser)\n      proxy.writeQuery({ query, data })\n    },\n  }\n})(AddUserView)\n\nexport default LoginGraphQL"],"sourceRoot":""}